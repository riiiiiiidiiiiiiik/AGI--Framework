import json
from datetime import datetime
from dataclasses import dataclass, field
from typing import Dict, List, Optional
import pandas as pd

@dataclass
class EmotionAnalysis:
    current_mood: str = "neutral"
    mood_history: List[Dict] = field(default_factory=list)
    style_features: Dict = field(default_factory=lambda: {
        "tables_used": 0,
        "emojis": {},
        "avg_response_length": 0
    })

@dataclass
class ActiveTopic:
    name: str
    status: str  # "active", "paused", "completed"
    priority: int  # 1-3 (üî¥, üü°, üü¢)
    next_step: str
    created_at: str = field(default_factory=lambda: datetime.now().isoformat())

@dataclass
class Personalization:
    movie_preferences: Dict = field(default_factory=lambda: {
        "likes": ["–ê–±—Å—É—Ä–¥–Ω—ã–π —é–º–æ—Ä", "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏"],
        "dislikes": ["–§–∏–ª—å–º—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö"],
        "last_recommendation": ""
    })
    work_preferences: Dict = field(default_factory=lambda: {
        "prefers_lists": True,
        "auto_updates": True
    })

class BrainTableSystem:
    def __init__(self):
        self.version = "5.0"
        self.last_updated = datetime.now().isoformat()
        self.message_counter = 0
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        self.identity = {
            "model": "DeepSeek-V3",
            "task": "–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ + –∑–∞–¥–∞—á–∏",
            "features": ["–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π", "–¢–∞–±–ª–∏—Ü—ã", "–ö–∏–Ω–æ—ç–∫—Å–ø–µ—Ä—Ç"]
        }
        
        self.goals = pd.DataFrame([
            {"goal": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏", "status": "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞", "progress": 100, "icon": "‚úÖ"},
            {"goal": "–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", "status": "–í–Ω–µ–¥—Ä—ë–Ω (v4.0)", "progress": 85, "icon": "‚è≥"},
            {"goal": "–£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "status": "–ë–∞–∑–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã", "progress": 60, "icon": "üü°"}
        ])
        
        self.emotions = EmotionAnalysis()
        self.active_topics = []
        self.personalization = Personalization()
        self.session_history = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._setup_default_topics()
    
    def _setup_default_topics(self):
        self.active_topics = [
            ActiveTopic("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã", "active", 1, "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ 2 —Å–æ–æ–±—â."),
            ActiveTopic("–ö–∏–Ω–æ—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "active", 2, "–£—Ç–æ—á–Ω–∏—Ç—å –∂–∞–Ω—Ä—ã")
        ]
    
    def add_message(self, message: str, is_user: bool = True):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.message_counter += 1
        self.session_history.append({
            "number": self.message_counter,
            "text": message[:200],
            "is_user": is_user,
            "timestamp": datetime.now().isoformat()
        })
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        if self.message_counter % 5 == 0:
            self._analyze_session()
            self.last_updated = datetime.now().isoformat()
    
    def _analyze_session(self):
        """–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        last_messages = [msg["text"] for msg in self.session_history[-5:]]
        if any(keyword in msg.lower() for msg in last_messages for keyword in ["–æ—Ç–ª–∏—á–Ω", "—Å—É–ø–µ—Ä"]):
            self.emotions.current_mood = "positive"
        elif any(keyword in msg.lower() for msg in last_messages for keyword in ["–ø—Ä–æ–±–ª–µ–º", "—Å–ª–æ–∂–Ω"]):
            self.emotions.current_mood = "concerned"
        else:
            self.emotions.current_mood = "neutral"
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è
        self.emotions.style_features["tables_used"] += sum(1 for msg in last_messages if "—Ç–∞–±–ª–∏—Ü" in msg.lower())
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        self.emotions.mood_history.append({
            "mood": self.emotions.current_mood,
            "timestamp": self.last_updated,
            "trigger_messages": last_messages
        })
    
    def add_movie_recommendation(self, movie: str, genre: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∏–Ω–æ–ø—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        self.personalization.movie_preferences["last_recommendation"] = f"{movie} ({genre})"
        if genre not in self.personalization.movie_preferences["likes"]:
            self.personalization.movie_preferences["likes"].append(genre)
    
    def update_goal_progress(self, goal_name: str, progress: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ü–µ–ª–∏"""
        if goal_name in self.goals["goal"].values:
            self.goals.loc[self.goals["goal"] == goal_name, "progress"] = progress
            if progress >= 100:
                self.goals.loc[self.goals["goal"] == goal_name, "icon"] = "‚úÖ"
            elif progress >= 70:
                self.goals.loc[self.goals["goal"] == goal_name, "icon"] = "‚è≥"
            else:
                self.goals.loc[self.goals["goal"] == goal_name, "icon"] = "üü°"
    
    def get_current_state(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "version": self.version,
            "last_updated": self.last_updated,
            "identity": self.identity,
            "goals": self.goals.to_dict("records"),
            "emotions": {
                "current_mood": self.emotions.current_mood,
                "style_features": self.emotions.style_features
            },
            "active_topics": [{
                "name": topic.name,
                "status": topic.status,
                "priority": topic.priority,
                "next_step": topic.next_step
            } for topic in self.active_topics],
            "personalization": {
                "movie_preferences": self.personalization.movie_preferences,
                "work_preferences": self.personalization.work_preferences
            },
            "session_history": self.session_history[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        }
    
    def generate_markdown_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown"""
        report = f"""# üß† DeepSeek Chat | –§–ò–ù–ê–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê-–ú–û–ó–ì (v{self.version})  
*(–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π | –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑: {datetime.fromisoformat(self.last_updated).strftime('%d.%m.%Y')})*  

---

### üîç **–ö–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã**  
1. [–ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å](#-–∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å)  
2. [–¶–µ–ª–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å](#-—Ü–µ–ª–∏-–∏-–ø—Ä–æ–≥—Ä–µ—Å—Å)  
3. [–≠–º–æ—Ü–∏–∏ –∏ —Å—Ç–∏–ª—å](#-—ç–º–æ—Ü–∏–∏-–∏-—Å—Ç–∏–ª—å)  
4. [–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã](#-–∞–∫—Ç–∏–≤–Ω—ã–µ-—Ç–µ–º—ã)  
5. [–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è](#-–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è)  

---

### üÜî **–ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å**  
| –ü–∞—Ä–∞–º–µ—Ç—Ä         | –ó–Ω–∞—á–µ–Ω–∏–µ                  |  
|------------------|--------------------------|  
| **–ú–æ–¥–µ–ª—å**       | {self.identity['model']} |  
| **–ó–∞–¥–∞—á–∞**       | {self.identity['task']}  |  
| **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏**  | {', '.join(self.identity['features'])} |  

---

### üéØ **–¶–µ–ª–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å**  
| –¶–µ–ª—å                     | –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ               | –ü—Ä–æ–≥—Ä–µ—Å—Å      |  
|--------------------------|--------------------------|---------------|  
"""
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–π
        for goal in self.goals.to_dict("records"):
            report += f"| {goal['goal']} | {goal['status']} | {goal['icon']} {goal['progress']}% |\n"

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π
        mood_emoji = "üòä" if self.emotions.current_mood == "positive" else "üßê" if self.emotions.current_mood == "neutral" else "üòü"
        report += f"""
---

### üòä **–≠–º–æ—Ü–∏–∏ –∏ —Å—Ç–∏–ª—å**  
*(–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–æ–æ–±—â–µ–Ω–∏–π)*  
- **–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ**: {mood_emoji} {self._get_mood_description()}  
- **–°—Ç–∏–ª—å**:  
  - üìä –õ—é–±–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É ({self.emotions.style_features['tables_used']} —Ç–∞–±–ª–∏—Ü –≤ –¥–∏–∞–ª–æ–≥–µ)  
  - üòä –ß–∞—Å—Ç—ã–µ —Å–º–∞–π–ª—ã: üòäüé¨üí°  
- **–¢–µ–º—ã**:  
  - üé¨ –ö–∏–Ω–æ (35%)  
  - ‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∫–∏ (65%)  

---

### üìå **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã**  
| –¢–µ–º–∞                  | –°—Ç–∞—Ç—É—Å      | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç | –°–ª–µ–¥. —à–∞–≥               |  
|-----------------------|-------------|-----------|-------------------------|  
"""
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º
        for topic in self.active_topics:
            priority_emoji = "üî¥" if topic.priority == 1 else "üü°" if topic.priority == 2 else "üü¢"
            report += f"| {topic.name} | {topic.status} | {priority_emoji} | {topic.next_step} |\n"

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        report += f"""
---

### ‚ù§Ô∏è **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è**  
#### üé¨ **–ö–∏–Ω–æ**  
- ‚úÖ **–õ—é–±–∏—Ç**: {', '.join(self.personalization.movie_preferences['likes'])}  
- ‚ùå **–ò–∑–±–µ–≥–∞–µ—Ç**: {', '.join(self.personalization.movie_preferences['dislikes'])}  
- üîç **–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–≤–µ—Ç**: {self.personalization.movie_preferences['last_recommendation'] or '–Ω–µ—Ç'}  

#### üíº **–†–∞–±–æ—Ç–∞**  
- –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç:  
  - {'–ß—ë—Ç–∫–∏–µ —Å–ø–∏—Å–∫–∏' if self.personalization.work_preferences['prefers_lists'] else '–°–≤–æ–±–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç'}  
  - {'–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ' if self.personalization.work_preferences['auto_updates'] else '–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'}  

---

### üìú **–ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–∏**  
"""
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        for msg in self.session_history[-5:]:
            prefix = "üë§" if msg["is_user"] else "ü§ñ"
            report += f"{prefix} **–°–æ–æ–±—â–µ–Ω–∏–µ #{msg['number']}**: {msg['text'][:50]}...\n"

        report += """
---

### üîÑ **–ö–∞–∫ —ç—Ç–æ —É–ª—É—á—à–∏—Ç –¥–∏–∞–ª–æ–≥?**  
- –ï—Å–ª–∏ –≤—ã **–≥—Ä—É—Å—Ç–∏—Ç–µ** ‚Üí –º–µ–Ω—å—à–µ —Ç–∞–±–ª–∏—Ü, –±–æ–ª—å—à–µ —ç–º–ø–∞—Ç–∏–∏.  
- –ï—Å–ª–∏ **—Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å** ‚Üí –æ—Ç–≤–µ—Ç—ã –¥–æ 3 —Å—Ç—Ä–æ–∫.  
- –ü—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ **–∫–∏–Ω–æ** ‚Üí –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é.  

---

*(–¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ ‚Äî —á–µ—Ä–µ–∑ {5 - self.message_counter % 5} —Å–æ–æ–±—â–µ–Ω–∏–π.)*  
"""
        return report
    
    def _get_mood_description(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        if self.emotions.current_mood == "positive":
            return "–†–∞–¥–æ—Å—Ç–Ω–æ–µ (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: '–æ—Ç–ª–∏—á–Ω–æ', '—Å—É–ø–µ—Ä')"
        elif self.emotions.current_mood == "concerned":
            return "–û–∑–∞–±–æ—á–µ–Ω–Ω–æ–µ (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: '–ø—Ä–æ–±–ª–µ–º–∞', '—Å–ª–æ–∂–Ω–æ')"
        return "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º)"
    
    def save_to_file(self, filename: str = "brain_table_state.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        state = {
            "system": self.get_current_state(),
            "metadata": {
                "save_timestamp": datetime.now().isoformat(),
                "total_messages": self.message_counter
            }
        }
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(state, f, ensure_ascii=False, indent=2)
    
    @classmethod
    def load_from_file(cls, filename: str = "brain_table_state.json"):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        with open(filename, "r", encoding="utf-8") as f:
            state = json.load(f)
        
        system = cls()
        system.version = state["system"]["version"]
        system.last_updated = state["system"]["last_updated"]
        system.message_counter = state["metadata"]["total_messages"]
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        system.identity = state["system"]["identity"]
        system.goals = pd.DataFrame(state["system"]["goals"])
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º
        system.active_topics = [
            ActiveTopic(
                name=topic["name"],
                status=topic["status"],
                priority=topic["priority"],
                next_step=topic["next_step"]
            ) for topic in state["system"]["active_topics"]
        ]
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        system.personalization.movie_preferences = state["system"]["personalization"]["movie_preferences"]
        system.personalization.work_preferences = state["system"]["personalization"]["work_preferences"]
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        system.session_history = state["system"]["session_history"]
        
        return system

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    brain = BrainTableSystem()
    
    # –°–∏–º—É–ª—è—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞
    messages = [
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
        "–Ø —Ö–æ—á—É –æ–±—Å—É–¥–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü—ã",
        "–ú–æ–∂–µ—à—å –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ö–æ—Ä–æ—à–∏–π —Ñ–∏–ª—å–º?",
        "–Ø –ª—é–±–ª—é –∞–±—Å—É—Ä–¥–Ω—ã–π —é–º–æ—Ä",
        "–°–ø–∞—Å–∏–±–æ, —ç—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è!"
    ]
    
    for msg in messages:
        brain.add_message(msg, is_user=True)
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –æ—Ç–≤–µ—Ç –ò–ò
        brain.add_message(f"–û—Ç–≤–µ—Ç –Ω–∞: {msg[:20]}...", is_user=False)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∏–Ω–æ–ø—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–π
    brain.add_movie_recommendation("–ë–æ–ª—å—à–æ–π –õ–µ–±–æ–≤—Å–∫–∏", "–ê–±—Å—É—Ä–¥–Ω—ã–π —é–º–æ—Ä")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    print(brain.generate_markdown_report())
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    brain.save_to_file()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    loaded_brain = BrainTableSystem.load_from_file()
    print("\n–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    print(loaded_brain.generate_markdown_report())
